AWSTemplateFormatVersion: "2010-09-09"

Description: "Amazon VPC Lattice Provider Example."

Parameters:
  CustomDomainName:
    Type: String
    Description: Custom Domain Name for the VPC Lattice Service.
  CertificateARN:
    Type: String
    Description: ARN of the AWS Certificate Manager certificate to associate to the VPC Lattice Service.
  ConsumerHostedZoneID:
    Type: String
    Description: (OPTIONAL) Public or Private Hosted Zone ID for the consumer application DNS resolution (CNAME record).
    Default: ""
  IngressHostedZoneId:
    Type: String
    Description: (OPTIONAL) Private Hosted Zone ID for the proxy solution DNS resoltuion (CNAME record).
    Default: ""
  IngressNLBDomainName:
    Type: String
    Description: (OPTIONAL) NLB domain name - created in Ingress VPC.
    Default: ""
  IngressVpcId:
    Type: String
    Description: (OPTIONAL) Ingress VPC ID (for Service Network VPC Association).
    Default: ""
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

Conditions:
  ProvidedConsumerHostedZone: !Not
    - !Equals
      - !Ref ConsumerHostedZoneId
      - ""
  ProvidedIngressHostedZone: !Not
    - !Equals
      - !Ref IngressHostedZoneId
      - ""
  ProvidedNLBDomainName: !Not
    - !Equals
      - !Ref IngressNLBDomainName
      - ""
  ProvidedIngressVpcId: !Not
    - !Equals
      - !Ref IngressVpcId
      - ""
  CreateConsumerRecord: !And
    - !Condition ProvidedConsumerHostedZone
    - !Condition ProvidedNLBDomainName

Resources:
# ---------- AMAZON VPC LATTICE RESOURCES ----------
  # Service Network
  LatticeServiceNetwork:
    Type: AWS::VpcLattice::ServiceNetwork
    Properties:
      Name: service-network-example
      AuthType: AWS_IAM

  LatticeServiceNetworkAuthPolicy:
    Type: AWS::VpcLattice::AuthPolicy
    Properties:
      ResourceIdentifier: !Ref LatticeServiceNetwork
      Policy:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'
  
  # Service
  LatticeService:
    Type: AWS::VpcLattice::Service
    Properties:
      Name: service-example
      AuthType: AWS_IAM
      CustomDomainName: !Ref CustomDomainName
      CertificateArn: !Ref CertificateARN

  LatticeServiceAssociation:
    Type: AWS::VpcLattice::ServiceNetworkServiceAssociation
    Properties:
      ServiceIdentifier: !Ref LatticeService
      ServiceNetworkIdentifier: !Ref LatticeServiceNetwork

  LatticeServiceAccessLogSubscription:
    Type: AWS::VpcLattice::AccessLogSubscription
    Properties:
      ResourceIdentifier: !Ref LatticeService
      DestinationArn: !GetAtt LatticeServiceLogGroup.Arn
  
  LatticeServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lattice/service/service-example
      RetentionInDays: 7
  
  LatticeServiceAuthPolicy:
    Type: AWS::VpcLattice::AuthPolicy
    Properties:
      ResourceIdentifier: !Ref LatticeService
      Policy:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: '*'
            Resource: '*'

  # Lambda Target
  LatticeLambdaTarget:
    Type: AWS::VpcLattice::TargetGroup
    Properties:
      Name: lambda-target
      Type: LAMBDA
      Targets:
        - Id: !GetAtt LambdaFunction.Arn

  # Instance Target
  LatticeInstancesTarget:
    Type: AWS::VpcLattice::TargetGroup
    Properties:
      Name: instances-target
      Type: INSTANCE
      Config:
        Port: 80
        Protocol: HTTP
        VpcIdentifier: !Ref VPC
        HealthCheck:
          Enabled: false
      Targets:
        - Id: !Select [0, !GetAtt InstancesASG.InstanceIDs]
          Port: 80
        - Id: !Select [1, !GetAtt InstancesASG.InstanceIDs]
          Port: 80

  # Listeners and Rules
  LatticeListener:
    Type: AWS::VpcLattice::Listener
    Properties:
      ServiceIdentifier: !Ref LatticeService
      Protocol: HTTPS
      Port: 443
      DefaultAction:
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref LatticeInstancesTarget
              Weight: 100
  
  LatticeReadRule:
    Type: AWS::VpcLattice::Rule
    Properties:
      ServiceIdentifier: !Ref LatticeService
      ListenerIdentifier: !Ref LatticeListener
      Name: lambda-rule
      Priority: 10
      Match:
        HttpMatch:
          PathMatch:
            Match:
              Exact: /lambda
      Action:
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref LatticeLambdaTarget
              Weight: 100
  
  # VPC Association (only if Ingress VPC is provided)
  LatticeVPCAssociation:
    Type: AWS::VpcLattice::ServiceNetworkVpcAssociation
    Condition: ProvidedIngressVpcId
    Properties: 
      ServiceNetworkIdentifier: !Ref LatticeServiceNetwork
      VpcIdentifier: !Ref IngressVpcId
  
# ---------- SERVICE: Lambda Function ----------
  # IAM Role
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBActions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Scan
                Resource:
                  - "*"
      ManagedPolicyArns:
        - !Sub arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # CloudWatch Log Group
  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaFunction}
      RetentionInDays: 7
  
  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Obtaining the AWS Region where the function is located."
      Runtime: python3.9
      Timeout: 10
      Role: !GetAtt LambdaFunctionRole.Arn
      Handler: index.lambda_handler
      Code: 
        ZipFile: |-
          import json
          import logging
          import string
          import os

          log = logging.getLogger("handler")
          log.setLevel(logging.INFO)

          def lambda_handler(event, context):
              try:
                  # We log the event received
                  log.info("Received event: %s", json.dumps(event))

                  # We obtain the AWS Region where the Lambda function is located
                  region = os.environ.get('AWS_REGION')
                  
                  # Return value
                  response = "Hello from AWS Lambda function in " + region
                  return {
                    "statusCode": 200,
                    "statusDescription": "200 OK",
                    "body": response
                  }

              except Exception as e:
                  log.exception("whoops")
                  log.info(e)

                  # Return exception error
                  return {
                    "statusCode": 500,
                    "statusDescription": "500 Internal Server Error",
                    "body": "Server error - check lambda logs\n"
                  }
  
# ---------- SERVICE: AutoScaling Group ----------  
  # VPC and Internet gateway
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags: 
        - 
          Key: Name
          Value: webserver-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - 
          Key: Name
          Value: webserver-igw

  IGWAssociation:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: 10.10.0.0/24
      Tags:
        - 
          Key: Name
          Value: webserver-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: 10.10.1.0/24
      Tags:
        - 
          Key: Name
          Value: webserver-public-subnet-2
  
  WorkloadSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: 10.10.2.0/24
      Tags:
        -
          Key: Name
          Value: webserver-workload-subnet-1

  WorkloadSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: 10.10.3.0/24
      Tags:
        -
          Key: Name
          Value: webserver-workload-subnet-2
   
  # Route Tables
  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - 
          Key: Name
          Value: webserver-public-rt-1
  
  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1
  
  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - 
          Key: Name
          Value: webserver-public-rt-2
  
  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2

  WorkloadRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        -
          Key: Name
          Value: webserver-workload-rt-1

  WorkloadRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WorkloadRouteTable1
      SubnetId: !Ref WorkloadSubnet1

  WorkloadRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        -
          Key: Name
          Value: webserver-workload-rt-2

  WorkloadRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WorkloadRouteTable2
      SubnetId: !Ref WorkloadSubnet2

  # NAT gateways and EIPs  
  EIP1:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
      Tags: 
        - Key: Name
          Value: eip-1
  
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags: 
        - Key: Name
          Value: eip-2
  
  NATGW1:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt EIP1.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet1
      Tags: 
        - Key: Name
          Value: natgw-1
  
  NATGW2:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt EIP2.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet2
      Tags: 
        - Key: Name
          Value: natgw-2
  
  # VPC routing
  PublicToIGW1:
    Type: AWS::EC2::Route
    DependsOn:
      - IGWAssociation
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable1
  
  PublicToIGW2:
    Type: AWS::EC2::Route
    DependsOn:
      - IGWAssociation
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable2

  WorkloadToNATGW1:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW1
      RouteTableId: !Ref WorkloadRouteTable1

  WorkloadToNATGW2:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW2
      RouteTableId: !Ref WorkloadRouteTable2
  
  # Security Groups
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: instance-sg
      GroupDescription: Instance Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: Allowing HTTP traffic
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
  
  # Launch Template      
  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: web-app-launchtemplate
      VersionDescription: v1.0
      LaunchTemplateData:
        InstanceType: t3.micro
        ImageId: !Ref LatestAmiId
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: web-server-instance
        UserData: 
          Fn::Base64: !Sub | 
            #!/bin/bash
            sudo su
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "Welcome to the single WebPage!! This is host $(hostname -f)" > /var/www/html/index.html

  # Auto-Scaling group 
  WebAppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
        AutoScalingGroupName: web-app-asg
        DesiredCapacity: "2"
        MaxSize: "2"
        MinSize: "2"
        LaunchTemplate: 
          LaunchTemplateId: !Ref WebAppLaunchTemplate
          Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
        VPCZoneIdentifier: 
          - !Ref WorkloadSubnet1
          - !Ref WorkloadSubnet2

  # Custom Resource (Obtaining Instance IDs from ASG)
  InstancesASG:
    Type: Custom::InstancesASG
    DependsOn:
      - WebAppASG
    Properties:
      ServiceToken: !GetAtt InstancesASGFunction.Arn
      ASGName: !Ref WebAppASG

  InstancesASGFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowAutoScalingActions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingGroups
                Resource:
                  - "*"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  InstancesASGFunctionLogGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: Encryption not required for this log group
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${InstancesASGFunction}
      RetentionInDays: 7

  InstancesASGFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: CWL permissions granted by use of AWSLambdaBasicExecutionRole
          - id: W89
            reason: No requirement for this function to be in a VPC
          - id: W92
            reason: No requirement to limit simultaneous executions
    Type: AWS::Lambda::Function
    Properties:
      Description: Obtaining Instances from Auto Scaling group
      Runtime: python3.9
      Timeout: 60
      Role: !GetAtt InstancesASGFunctionRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |-
          import logging
          import boto3
          import json
          import cfnresponse
          from botocore.exceptions import ClientError
          log = logging.getLogger("handler")
          log.setLevel(logging.INFO)
          def lambda_handler(event, context):
              try:
                  log.info("Received event: %s", json.dumps(event))
                  # Obtaining AutoScaling group name
                  #asg_name = event["ResourceProperties"]["ASGName"]
                  asg_name="web-app-asg"
                  # Initialize boto3 client
                  asg = boto3.client('autoscaling')
                  
                  # Empty string of instance IDs
                  instance_ids = []
                  # We obtain the Auto Scaling group information
                  asg_information = asg.describe_auto_scaling_groups(AutoScalingGroupNames=[asg_name])
                  # We get the Instance IDs of the ASG
                  for i in asg_information['AutoScalingGroups']:
                      for k in i['Instances']:
                          instance_ids.append(k['InstanceId'])

                  # Returning data
                  responseData = {}
                  responseData['InstanceIDs'] = instance_ids

                  # Returning the Instance IDs
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              
              except:
                  log.exception("whoops")
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.FAILED,
                      {},
                      reason="Caught exception, check logs",
                  )

# ---------- ROUTE 53 RECORDS ----------
  # Route 53 CNAME record in "Consumer" Hosted Zone
  ConsumerCNAMERecord:
    Condition: CreateConsumerRecord
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref ConsumerHostedZoneId
      Type: CNAME
      TTL: 300
      Name: !Ref CustomDomainName
      ResourceRecords:
        - !Ref IngressNLBDomainName
  
  # Route 53 CNAME record in "Ingress" Hosted Zone
  IngressCNAMERecord:
    Condition: ProvidedIngressHostedZone
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref IngressHostedZoneId
      Type: CNAME
      TTL: 300
      Name: !Ref CustomDomainName
      ResourceRecords:
        - !GetAtt LatticeService.DnsEntry.DomainName